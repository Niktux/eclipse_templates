<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="php" deleted="false" description="Named collection" enabled="true" name="collection">class ${uppercase_singular_entity}Collection implements \IteratorAggregate, \Countable&#13;
{&#13;
    private&#13;
        $$${lowercase_plural_entity};&#13;
    &#13;
    public function __construct(iterable $$${lowercase_plural_entity} = [])&#13;
    {&#13;
        $$this-&gt;${lowercase_plural_entity} = [];&#13;
            &#13;
        foreach($$${lowercase_plural_entity} as $$${lowercase_singular_entity})&#13;
        {&#13;
            if($$${lowercase_singular_entity} instanceof ${uppercase_singular_entity})&#13;
            {&#13;
                $$this-&gt;add($$${lowercase_singular_entity});&#13;
            }&#13;
        }&#13;
    }&#13;
    &#13;
    public function add(${uppercase_singular_entity} $$${lowercase_singular_entity}): self&#13;
    {&#13;
        $$this-&gt;${lowercase_plural_entity}[] = $$${lowercase_singular_entity};&#13;
        &#13;
        return $$this;&#13;
    }&#13;
    &#13;
    public function getIterator(): \Iterator&#13;
    {&#13;
        return new \ArrayIterator($$this-&gt;${lowercase_plural_entity});&#13;
    }&#13;
    &#13;
    public function count(): int&#13;
    {&#13;
        return count($$this-&gt;${lowercase_plural_entity});&#13;
    }&#13;
}&#13;
</template></templates>