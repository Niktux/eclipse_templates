<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="php" deleted="false" description="VO for enumerated type" enabled="true" name="vo_enum">use Puzzle\Pieces\ConvertibleToString;&#13;
use Onyx\Domain\ValueObject;&#13;
&#13;
final class ${uppercase_VO} implements ValueObject, ConvertibleToString&#13;
{&#13;
    private&#13;
        $$value;&#13;
&#13;
    public function __construct(string $$value)&#13;
    {&#13;
        $$allowed = ['${legit_value_1}', '${legit_value_2}'];&#13;
        &#13;
        if(! in_array($$value, $$allowed))&#13;
        {&#13;
            throw new \LogicException("Invalid ${lowercase_VO} : $$value");&#13;
        }&#13;
        &#13;
        $$this-&gt;value = $$value;&#13;
    }&#13;
    &#13;
    public static function ${legit_value_1}(): self&#13;
    {&#13;
        return new self('${legit_value_1}');&#13;
    }&#13;
    &#13;
    public static function ${legit_value_2}(): self&#13;
    {&#13;
        return new self('${legit_value_2}');&#13;
    }&#13;
&#13;
    public function value(): string&#13;
    {&#13;
        return $$this-&gt;value;&#13;
    }&#13;
&#13;
    public function equals(self $$${lowercase_VO}): bool&#13;
    {&#13;
        return $$this-&gt;value === $$${lowercase_VO}-&gt;value();&#13;
    }&#13;
&#13;
    public function __toString(): string&#13;
    {&#13;
        return $$this-&gt;value;&#13;
    }&#13;
}&#13;
</template></templates>